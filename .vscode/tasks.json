{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Run FastAPI Development Server (Poetry)",
			"type": "shell",
			"command": "poetry run uvicorn main:app --reload --host 0.0.0.0 --port 8080",
			"group": "build",
			"isBackground": true,
			"problemMatcher": []
		},
		{
			"label": "Poetry: Install Dependencies",
			"type": "shell",
			"command": "poetry install",
			"group": "build",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Add Dependency",
			"type": "shell",
			"command": "poetry add ${input:packageName}",
			"group": "build",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Format Code (Black)",
			"type": "shell",
			"command": "poetry run black .",
			"group": "build",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Sort Imports (isort)",
			"type": "shell",
			"command": "poetry run isort .",
			"group": "build",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Lint Code (flake8)",
			"type": "shell",
			"command": "poetry run flake8 .",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Type Check (mypy)",
			"type": "shell",
			"command": "poetry run mypy .",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run Tests",
			"type": "shell",
			"command": "poetry run pytest",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run Tests with Coverage",
			"type": "shell",
			"command": "poetry run pytest --cov=. --cov-report=term-missing --cov-report=html:reports/coverage",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run Shared Component Tests",
			"type": "shell",
			"command": "poetry run pytest tests/shared/ -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run Stories Tests",
			"type": "shell",
			"command": "poetry run pytest tests/stories/ -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run Stories Unit Tests",
			"type": "shell",
			"command": "poetry run pytest tests/stories/test_unit.py -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run Stories Integration Tests",
			"type": "shell",
			"command": "poetry run pytest tests/stories/test_integration.py -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run LLM Tests",
			"type": "shell",
			"command": "poetry run pytest tests/llm/ -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run LLM Unit Tests",
			"type": "shell",
			"command": "poetry run pytest tests/llm/test_unit.py -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run LLM Integration Tests",
			"type": "shell",
			"command": "poetry run pytest tests/llm/test_integration.py -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run LLM API Tests",
			"type": "shell",
			"command": "poetry run pytest tests/llm/test_llm_api.py -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run E2E Tests",
			"type": "shell",
			"command": "poetry run pytest tests/e2e/ -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run E2E Workflow Tests",
			"type": "shell",
			"command": "poetry run pytest tests/e2e/test_workflows.py -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run Tests Without LLM Integration",
			"type": "shell",
			"command": "poetry run pytest -m \"not llm_integration\" -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run Unit Tests Only",
			"type": "shell",
			"command": "poetry run pytest tests/shared/ tests/stories/test_unit.py tests/llm/test_unit.py -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run Integration Tests Only",
			"type": "shell",
			"command": "poetry run pytest tests/stories/test_integration.py tests/llm/test_integration.py tests/llm/test_llm_api.py tests/e2e/ -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run Task Service Tests",
			"type": "shell",
			"command": "poetry run pytest tests/tasks/test_task_service.py -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run Task API Tests",
			"type": "shell",
			"command": "poetry run pytest tests/tasks/test_tasks_api.py -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run All Task Tests",
			"type": "shell",
			"command": "poetry run pytest tests/tasks/ -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run Async LLM API Tests",
			"type": "shell",
			"command": "poetry run pytest tests/llm/test_llm_api_async.py -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run Stories Celery Integration Tests",
			"type": "shell",
			"command": "poetry run pytest tests/stories/test_integration_celery.py -v -m celery_integration",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run LLM Celery Integration Tests",
			"type": "shell",
			"command": "poetry run pytest tests/llm/test_integration_celery.py -v -m celery_integration",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run All Celery Integration Tests",
			"type": "shell",
			"command": "poetry run pytest -v -m celery_integration",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run Tests Without Celery Integration",
			"type": "shell",
			"command": "poetry run pytest -m \"not celery_integration\" -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run Fast Tests Only",
			"type": "shell",
			"command": "poetry run pytest -m \"not slow and not llm_integration and not celery_integration\" -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run Stories Async Integration Tests",
			"type": "shell",
			"command": "poetry run pytest tests/stories/test_integration_async.py -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run E2E Async Workflow Tests",
			"type": "shell",
			"command": "poetry run pytest tests/e2e/test_workflows_async.py -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Run All New Async Tests",
			"type": "shell",
			"command": "poetry run pytest tests/tasks/ tests/llm/test_llm_api_async.py tests/stories/test_integration_async.py tests/e2e/test_workflows_async.py -v",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Check Outdated Packages",
			"type": "shell",
			"command": "poetry show --outdated",
			"group": "build",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Update All Dependencies",
			"type": "shell",
			"command": "poetry update",
			"group": "build",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Update Core Dependencies (Priority)",
			"type": "shell",
			"command": "poetry update fastapi sqlalchemy pydantic uvicorn",
			"group": "build",
			"problemMatcher": []
		},
		{
			"label": "Poetry: Update with Priority Script",
			"type": "shell",
			"command": "./update_dependencies.sh",
			"group": "build",
			"problemMatcher": []
		},
		{
			"label": "Locust: Start Web Interface",
			"type": "shell",
			"command": "poetry run locust -f tests/e2e/locustfile.py --host=http://localhost:8080",
			"group": "test",
			"isBackground": true,
			"problemMatcher": []
		},
		{
			"label": "Locust: Light Load Test",
			"type": "shell",
			"command": "poetry run locust -f tests/e2e/locustfile.py --host=http://localhost:8080 --headless --users 10 --spawn-rate 2 --run-time 2m --html reports/performance/light_load_report.html",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Locust: Medium Load Test",
			"type": "shell",
			"command": "poetry run locust -f tests/e2e/locustfile.py --host=http://localhost:8080 --headless --users 50 --spawn-rate 5 --run-time 5m --html reports/performance/medium_load_report.html",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Locust: Heavy Load Test",
			"type": "shell",
			"command": "poetry run locust -f tests/e2e/locustfile.py --host=http://localhost:8080 --headless --users 200 --spawn-rate 10 --run-time 10m --html reports/performance/heavy_load_report.html",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Locust: Stress Test",
			"type": "shell",
			"command": "poetry run locust -f tests/e2e/locustfile.py --host=http://localhost:8080 --headless --users 500 --spawn-rate 20 --run-time 5m --html reports/performance/stress_test_report.html",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Locust: Spike Test",
			"type": "shell",
			"command": "poetry run locust -f tests/e2e/locustfile.py --host=http://localhost:8080 --headless --users 100 --spawn-rate 50 --run-time 3m --html reports/performance/spike_test_report.html",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Locust: Endurance Test",
			"type": "shell",
			"command": "poetry run locust -f tests/e2e/locustfile.py --host=http://localhost:8080 --headless --users 30 --spawn-rate 3 --run-time 30m --html reports/performance/endurance_test_report.html",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Docker: Start Services",
			"type": "shell",
			"command": "./docker-setup.sh start",
			"group": "build",
			"isBackground": true,
			"problemMatcher": [],
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true
			}
		},
		{
			"label": "Docker: Stop Services",
			"type": "shell",
			"command": "./docker-setup.sh stop",
			"group": "build",
			"problemMatcher": []
		},
		{
			"label": "Docker: Restart Services",
			"type": "shell",
			"command": "./docker-setup.sh restart",
			"group": "build",
			"isBackground": true,
			"problemMatcher": []
		},
		{
			"label": "Docker: Build Application",
			"type": "shell",
			"command": "./docker-setup.sh build",
			"group": "build",
			"problemMatcher": []
		},
		{
			"label": "Docker: Show Logs",
			"type": "shell",
			"command": "./docker-setup.sh logs",
			"group": "build",
			"isBackground": true,
			"problemMatcher": [],
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "new"
			}
		},
		{
			"label": "Docker: Connect to MySQL",
			"type": "shell",
			"command": "./docker-setup.sh mysql",
			"group": "build",
			"problemMatcher": [],
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "new"
			}
		},
		{
			"label": "Docker: Migrate from SQLite",
			"type": "shell",
			"command": "./docker-setup.sh migrate",
			"group": "build",
			"problemMatcher": []
		},
		{
			"label": "Docker: Clean All (⚠️ Removes Data)",
			"type": "shell",
			"command": "./docker-setup.sh clean",
			"group": "build",
			"problemMatcher": [],
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "new"
			}
		},
		{
			"label": "Docker Test: Start Test Database",
			"type": "shell",
			"command": "docker-compose -f docker-compose.test.yml up -d",
			"group": "test",
			"isBackground": true,
			"problemMatcher": []
		},
		{
			"label": "Docker Test: Stop Test Database",
			"type": "shell",
			"command": "docker-compose -f docker-compose.test.yml down",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Docker Test: Clean Test Database",
			"type": "shell",
			"command": "docker-compose -f docker-compose.test.yml down",
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Test: Run with MySQL Test Database",
			"type": "shell",
			"command": "TEST_DATABASE_URL=\"mysql+mysqlconnector://test_user:test_pass@localhost:3307/storyteller_test\" poetry run pytest tests/ -v",
			"group": "test",
			"dependsOn": "Docker Test: Start Test Database",
			"problemMatcher": []
		},
		{
			"label": "Docker Test: Start Test Database with Celery",
			"type": "shell",
			"command": "docker-compose -f docker-compose.test.yml --profile celery up -d",
			"group": "test",
			"isBackground": true,
			"problemMatcher": []
		},
		{
			"label": "Docker Test: Start Full Test Environment",
			"type": "shell",
			"command": "docker-compose -f docker-compose.test.yml --profile full up -d",
			"group": "test",
			"isBackground": true,
			"problemMatcher": []
		},
		{
			"label": "Test: Run Celery Integration Tests with MySQL",
			"type": "shell",
			"command": "TEST_DATABASE_URL=\"mysql+mysqlconnector://test_user:test_pass@localhost:3307/storyteller_test\" CELERY_BROKER_URL=\"redis://localhost:6380/0\" CELERY_RESULT_BACKEND=\"redis://localhost:6380/1\" poetry run pytest -m celery_integration -v",
			"group": "test",
			"dependsOn": "Docker Test: Start Test Database with Celery",
			"problemMatcher": []
		},
		{
			"label": "Complete: Start Development Environment",
			"dependsOrder": "sequence",
			"dependsOn": [
				"Docker: Start Services",
				"Run FastAPI Development Server (Poetry)"
			],
			"group": "build",
			"problemMatcher": []
		},
		{
			"label": "Celery: Start Redis",
			"type": "shell",
			"command": "./celery-setup.sh start",
			"group": "build",
			"isBackground": true,
			"problemMatcher": []
		},
		{
			"label": "Celery: Stop Redis",
			"type": "shell",
			"command": "./celery-setup.sh stop",
			"group": "build",
			"problemMatcher": []
		},
		{
			"label": "Celery: Start Worker",
			"type": "shell",
			"command": "./celery-setup.sh worker",
			"group": "build",
			"isBackground": true,
			"problemMatcher": []
		},
		{
			"label": "Celery: Start Flower Monitoring",
			"type": "shell",
			"command": "./celery-setup.sh flower",
			"group": "build",
			"isBackground": true,
			"problemMatcher": []
		},
		{
			"label": "Celery: Show Status",
			"type": "shell",
			"command": "./celery-setup.sh status",
			"group": "build",
			"problemMatcher": []
		},
		{
			"label": "Celery: Show Logs",
			"type": "shell",
			"command": "./celery-setup.sh logs",
			"group": "build",
			"isBackground": true,
			"problemMatcher": []
		},
		{
			"label": "Complete: Full Test Suite with MySQL",
			"dependsOrder": "sequence",
			"dependsOn": [
				"Docker Test: Start Test Database",
				"Test: Run with MySQL Test Database",
				"Docker Test: Clean Test Database"
			],
			"group": "test",
			"problemMatcher": []
		}
	],
	"inputs": [
		{
			"id": "packageName",
			"description": "Package name to add",
			"default": "fastapi",
			"type": "promptString"
		}
	]
}
