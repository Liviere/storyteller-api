services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: story-teller-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-storyteller}
      MYSQL_USER: ${MYSQL_USER:-storyteller_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-storyteller_pass}
    ports:
      - '${MYSQL_HOST_PORT:-3306}:${MYSQL_CONTAINER_PORT:-3306}'
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - story-teller-network
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      timeout: 20s
      retries: 10
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

  # FastAPI Application
  app:
    build: .
    container_name: story-teller-app
    restart: unless-stopped
    command:
      [
        'fastapi',
        'run',
        'main.py',
        '--port',
        '${APP_CONTAINER_PORT:-8080}',
        '--host',
        '0.0.0.0',
      ]
    ports:
      - '${APP_HOST_PORT:-8080}:${APP_CONTAINER_PORT:-8080}'
    environment:
      DATABASE_URL: mysql+mysqlconnector://${MYSQL_USER:-storyteller_user}:${MYSQL_PASSWORD:-storyteller_pass}@mysql:${MYSQL_CONTAINER_PORT:-3306}/${MYSQL_DATABASE:-storyteller}
      MYSQL_HOST: mysql
      MYSQL_PORT: ${MYSQL_CONTAINER_PORT:-3306}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-storyteller}
      MYSQL_USER: ${MYSQL_USER:-storyteller_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-storyteller_pass}
      CELERY_BROKER_URL: redis://redis:${REDIS_CONTAINER_PORT:-6379}/0
      CELERY_RESULT_BACKEND: redis://redis:${REDIS_CONTAINER_PORT:-6379}/1
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - story-teller-network
    volumes:
      - ./logs:/app/logs
    profiles: ['production']

  # phpMyAdmin (optional - for database management)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: story-teller-phpmyadmin
    restart: unless-stopped
    ports:
      - '${PHPMYADMIN_HOST_PORT:-8081}:${PHPMYADMIN_CONTAINER_PORT:-80}'
    environment:
      PMA_HOST: mysql
      PMA_PORT: ${MYSQL_CONTAINER_PORT:-3306}
      PMA_USER: ${MYSQL_USER:-storyteller_user}
      PMA_PASSWORD: ${MYSQL_PASSWORD:-storyteller_pass}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - story-teller-network
    profiles: ['tools', 'infrastructure', 'full']

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: story-teller-redis
    restart: unless-stopped
    ports:
      - '${REDIS_HOST_PORT:-6379}:${REDIS_CONTAINER_PORT:-6379}'
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - story-teller-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ['celery', 'infrastructure', 'tools', 'monitoring', 'full']

  # Celery Worker
  celery-worker:
    build: .
    container_name: story-teller-celery-worker
    restart: unless-stopped
    command: >
      sh -c "poetry run celery -A app.celery_app.celery:celery_app worker 
             --loglevel=info 
             --concurrency=4 
             --queues=default,stories,llm 
             --hostname=worker@%h 
             --max-tasks-per-child=100 
             --time-limit=300 
             --soft-time-limit=240"
    environment:
      CELERY_BROKER_URL: redis://redis:${REDIS_CONTAINER_PORT:-6379}/0
      CELERY_RESULT_BACKEND: redis://redis:${REDIS_CONTAINER_PORT:-6379}/1
      DATABASE_URL: mysql+mysqlconnector://${MYSQL_USER:-storyteller_user}:${MYSQL_PASSWORD:-storyteller_pass}@mysql:${MYSQL_CONTAINER_PORT:-3306}/${MYSQL_DATABASE:-storyteller}
      MYSQL_HOST: mysql
      MYSQL_PORT: ${MYSQL_CONTAINER_PORT:-3306}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-storyteller}
      MYSQL_USER: ${MYSQL_USER:-storyteller_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-storyteller_pass}
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - story-teller-network
    volumes:
      - ./logs:/app/logs
    profiles: ['production']

  # Flower Monitoring
  flower:
    build: .
    container_name: story-teller-flower
    restart: unless-stopped
    command: >
      sh -c "poetry run celery -A app.celery_app.celery:celery_app flower 
             --port=${FLOWER_CONTAINER_PORT:-5555}
             --broker_api=redis://redis:${REDIS_CONTAINER_PORT:-6379}/0"
    ports:
      - '${FLOWER_HOST_PORT:-5555}:${FLOWER_CONTAINER_PORT:-5555}'
    environment:
      CELERY_BROKER_URL: redis://redis:${REDIS_CONTAINER_PORT:-6379}/0
      CELERY_RESULT_BACKEND: redis://redis:${REDIS_CONTAINER_PORT:-6379}/1
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - story-teller-network
    profiles: ['monitoring', 'celery', 'full']

  # Redis Commander (Redis UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: story-teller-redis-ui
    restart: unless-stopped
    ports:
      - '${REDIS_UI_HOST_PORT:-8082}:${REDIS_UI_CONTAINER_PORT:-8081}'
    environment:
      REDIS_HOSTS: redis:redis:${REDIS_CONTAINER_PORT:-6379}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - story-teller-network
    profiles: ['tools', 'infrastructure', 'full']

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  story-teller-network:
    driver: bridge
